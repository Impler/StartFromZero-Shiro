# ini文件格式类似于properties文件，唯一的区别在于，properties中的key是在整个文件中唯一的，而ini文件的key只要在当前section中唯一即可
# '[xxx]'标识定义一段section，其后直到下个section标识前均为当前section的作用范围
# Shiro采用ini格式文件的配置，可配4个section，[main]/[users]/[roles]/[urls]
# ----------------------------------------------
# [main]：配置应用的SecurityManager 及其依赖对象，包括Realm等
[main]
# 1 定义对象, xxx = xxx，如果该对象实现了org.apache.shiro.util.Nameable 接口，Shiro在初始化对象时，会将当前对象名作为参数传入其setName方法
myRealm1=com.study.shiro.realm.MyRealm1
# 2 为对象属性赋值
myRealm1.xxx = xxx
# 如果对象的依赖属性为复杂对象，Shiro支持‘.’分隔的对象图方式赋值，基于Apache BeanUtils 实现
myRealm1.xx.xxx.xxxx.xxxx=xxx
# 3 引用对象，通过'$'对象名引用上面定义的对象
securityManager.realms=$myRealm1
# 4 表示字节数组，ini无法仅仅通过文字来表达数组的含义，所以一般使用字节数组的Base64（默认）或Hex形式表示
# 5 表示集合，使用','分隔对象即可用来表示集合
securityManager.realms=$myRealm1,$myRealm2
# 6 表示map，使用','分隔多个键值对，键值对之间用':'分隔
xxx.xxxxx = key1:$val1,key2:$val2
# 7 对象的创建和赋值顺序以配置出现的顺序为准，重复的配置，后者覆盖前者
# 8 securityManager 对象是预定义的，不需要在ini中定义，可以拿过来直接使用

# ----------------------------------------------
# [users]：配置一组静态的用户信息，包括用户名、密码、角色。仅适用于简单应用
[users]
# 格式：用户名=密码[,角色1,角色2]
admin=123,roleAdmin,roleAdmin2
fooUser=123
user=1234,userRole
# 如果需要使用密文密码，则需要在[main]中告诉Shiro使用的是什么算法
# 例如采用SHA256算法
sha256Matcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher
iniRealm.credentialsMatcher = $sha256Matcher

#------------------------------------------------
# [roles]：配置角色的权限
[roles]
# 格式：角色名 = 权限1, 权限2, ...
# 权限的表示分为三部分，以':'分隔
# 例如: user:add:1001 
# 第一部分[user]表示最大的分类或者操作类型或者域，随便你怎么理解；
# 第二部分[add]表示在当前域下的操作；
# 第三部分[1001]表示允许使用该操作的用户标识
# 连起来即为只允许用户标识为1001的用户使用user模块下的add操作。
# 每一部分都可以使用通配符'*'表示所有。多个之间用','分隔。如user:add,delete:*(同user:add,delete)
# admin角色拥有所有权限
adminRole = *
userRole = user:*

#-----------------------------------------------
# [urls]：为url路径配置过滤器
[urls]
# 格式：相对于项目根路径的相对路径 = 拦截器名1[说明]，拦截器2[说明]，。。。
# /users/** = ssl, anthc
# 拦截器名为在[main]中定义，而不是javax.servlet.Filter。javax.servlet.Filter继承PathMatchingFilter后也可以在这里配置
# Shiro提供了默认的filter，可以直接引用。DefaultFilter以枚举的形式定义了默认的几种filter，其枚举变量的名称即为这边可使用的filter名
# 以第一个匹配的配置为准，后面的配置将会被短路
/uses/** = anthc







